################################################################################
# Check for sanity to avoid later confusion

ifneq ($(words $(CURDIR)),1)
 $(error Unsupported: GNU Make cannot build in directories containing spaces, build elsewhere: '$(CURDIR)')
endif

################################################################################
# Set up variables

# If $VERILATOR_ROOT isn't in the environment, we assume it is part of a
# package install, and verilator is in your path. Otherwise find the
# binary relative to $VERILATOR_ROOT (such as when inside the git sources).
ifeq ($(VERILATOR_ROOT),)
VERILATOR:=verilator
VERILATOR_COVERAGE:=verilator_coverage
else
export VERILATOR_ROOT
VERILATOR:=$(VERILATOR_ROOT)/bin/verilator
VERILATOR_COVERAGE:=$(VERILATOR_ROOT)/bin/verilator_coverage
endif

# Generate C++ in executable form
VERILATOR_FLAGS+=--cc --exe
# Generate makefile dependencies (not shown as complicates the Makefile)
#VERILATOR_FLAGS+=-MMD
# Optimize
VERILATOR_FLAGS+=--x-assign fast
# Warn abount lint issues; may not want this on less solid designs
VERILATOR_FLAGS+=-Wall
# Make waveforms
VERILATOR_FLAGS+=--trace
# Check SystemVerilog assertions
VERILATOR_FLAGS+=--assert
# Generate coverage analysis
VERILATOR_FLAGS+=--coverage
# Run Verilator in debug mode
#VERILATOR_FLAGS+=--debug
# Add this trace to get a backtrace in gdb
#VERILATOR_FLAGS+=--gdbbt

include config.mk

################################################################################

ifeq ($(MDIR),)
MDIR:=obj_dir
endif

VERILATOR_FLAGS+=$(addprefix --CFLAGS ,$(VCFLAGS))

ifneq ($(submodule),)
SRC_D:=$(SUB_D)/$(submodule)
MODULE:=$(submodule)
MDIR:=$(MDIR)/S$(submodule)
VERILATOR_FLAGS+=$(addprefix --CFLAGS -I../../,$(INC_D))

# necessary, the `Vxxx.mk` generated by verilator is buggy,
# append this path to its `VPATH` through a `echo` command is much clumsy, but it works
# read the `Vxxx.mk` file and you can see the details
VVPATH:=../..
else
SRC_D:=$(MASTER_D)
VERILATOR_FLAGS+=$(addprefix --CFLAGS -I../,$(INC_D))
VVPATH:=..
endif

SRC_D+=$(shell zsh -c 'echo $(SRC_D)/**/*(FN)')
VSRC:=$(wildcard $(addsuffix /*.sv,$(SRC_D)))
VSRC+=$(wildcard $(addsuffix /*.v,$(SRC_D)))
CSRC:=$(wildcard $(addsuffix /*.cpp,$(SRC_D)))
CSRC+=$(wildcard $(addsuffix /*.cc,$(SRC_D)))
INC:=$(wildcard $(addsuffix /*,$(INC_D)))
WAVE:=$(WAVE_D)/W$(MODULE).vcd

# VERILATOR_FLAGS+=$(addprefix --top-module ,$(TOPMODULE))
VERILATOR_FLAGS+=$(addprefix --Mdir ,$(MDIR))
VERILATOR_FLAGS+=$(addprefix --threads ,$(THREADS))

EXECUTABLE:=$(MDIR)/V$(MODULE)

VERILATOR_INPUT:=$(VSRC) $(CSRC)

default: $(EXECUTABLE)

.PHONY: verilate
verilate:
	@echo
	@echo '### VERILATING ###############'
	@echo
	$(VERILATOR) $(VERILATOR_FLAGS) $(VERILATOR_INPUT)
	@echo 'VPATH+=$(VVPATH)' >> $(MDIR)/V$(MODULE).mk

.PHONY: build
build:
	@echo
	@echo '### BUILDING   ###############'
	@echo
	$(MAKE) -j -C $(MDIR) -f V$(MODULE).mk V$(MODULE)

.PHONY: sim
sim: $(EXECUTABLE)
	@echo
	@echo '### SIMULATING ###############'
	@echo
	./$< $(SIM_FLAGS)
	@[[ -e $(RAW_WAVE) ]] && mv $(RAW_WAVE) $(WAVE)

.PHONY: wave
wave: $(WAVE)
	@echo
	@echo '### WAVING     ###############'
	@echo
	gtkwave $^

$(EXECUTABLE): $(CSRC) $(VSRC) $(INC)
	@echo
	@echo '### VERILATING ###############'
	@echo
	$(VERILATOR) $(VERILATOR_FLAGS) $(VERILATOR_INPUT)
	@echo 'VPATH+=$(VVPATH)' >> $(MDIR)/V$(MODULE).mk
	@echo
	@echo '### BUILDING   ###############'
	@echo
	$(MAKE) -j -C $(MDIR) -f V$(MODULE).mk V$(MODULE)

$(WAVE): $(EXECUTABLE)
	@echo
	@echo '### SIMULATING ###############'
	@echo
	./$< $(SIM_FLAGS)
	@[[ -e $(RAW_WAVE) ]] && mv $(RAW_WAVE) $@

.PHONY: rewave
rewave: sim
	@echo
	@echo '### WAVING - FORCE    ########'
	@echo
	gtkwave $(WAVE)


.PHONY: lint
lint:
	@echo
	@echo '### LINTING    ###############'
	@echo
	$(VERILATOR) --lint-only $(VSRC)

.PHONY: clean
clean:
	@rm -rf $(MDIR) $(WAVE_D)

ifneq ($(MAKECMDGOALS),clean)
 $(shell mkdir -p $(WAVE_D))
 $(shell mkdir -p $(MDIR))
endif
