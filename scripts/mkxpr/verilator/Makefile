################################################################################
# Check for sanity to avoid later confusion

ifneq ($(words $(CURDIR)),1)
 $(error Unsupported: GNU Make cannot build in directories containing spaces, build elsewhere: '$(CURDIR)')
endif

################################################################################
# Set up variables

# If $VERILATOR_ROOT isn't in the environment, we assume it is part of a
# package install, and verilator is in your path. Otherwise find the
# binary relative to $VERILATOR_ROOT (such as when inside the git sources).
ifeq ($(VERILATOR_ROOT),)
VERILATOR:=verilator
VERILATOR_COVERAGE:=verilator_coverage
else
export VERILATOR_ROOT
VERILATOR:=$(VERILATOR_ROOT)/bin/verilator
VERILATOR_COVERAGE:=$(VERILATOR_ROOT)/bin/verilator_coverage
endif

# do not add --build options here!
# seperate verilate and build is required by code analysis tools
#
# Generate C++ in executable form
VERILATOR_FLAGS+=--cc --exe
# Generate makefile dependencies (not shown as complicates the Makefile)
#VERILATOR_FLAGS+=-MMD
# Optimize
VERILATOR_FLAGS+=--x-assign fast
VERILATOR_FLAGS+=-O2
# Warn abount lint issues; may not want this on less solid designs
VERILATOR_FLAGS+=-Wall
# Make waveforms
VERILATOR_FLAGS+=--trace
# Check SystemVerilog assertions
VERILATOR_FLAGS+=--assert
# VERILATOR_FLAGS+=--noassert
# Generate coverage analysis
VERILATOR_FLAGS+=--coverage
# Run Verilator in debug mode
#VERILATOR_FLAGS+=--debug
# Add this trace to get a backtrace in gdb
#VERILATOR_FLAGS+=--gdbbt

# VERILATOR_FLAGS+=--top-module top

include config.mk
MDIR_BACKUP:=$(MDIR)

################################################################################
# figure out which module to run, master or submodule or nvboard
ifneq ($(submodule),)
PREFIX:=S
MODULE:=$(submodule)
SRC_D:=$(SUB_D)/$(submodule)
MDIR:=$(MDIR)/S$(submodule)
NVBFLAGS:=
else ifneq ($(nvboard),)
PREFIX:=N
MODULE:=$(nvboard)
SRC_D:=$(NVB_D)/$(nvboard)
MDIR:=$(MDIR)/N$(nvboard)
NVBFLAGS:=$(addprefix --LDFLAGS ,-lSDL2 -lSDL2_image -lSDL2_ttf -lnvboard)
else
PREFIX:=M
MODULE:=$(MASTER)
SRC_D:=$(MASTER_D)
MDIR:=$(MDIR)/M$(MASTER)
NVBFLAGS:=
endif

VERILATOR_FLAGS+=$(addprefix --top-module ,$(MODULE))

VERILATOR_FLAGS+=$(addprefix --CFLAGS -I../../,$(INC_D))
VERILATOR_FLAGS+=$(addprefix --CFLAGS ,$(MCXXFLAGS))
VERILATOR_FLAGS+=$(addprefix --LDFLAGS -L../../,$(LIB_D))
VERILATOR_FLAGS+=$(addprefix --LDFLAGS ,$(MLDFLAGS))

# specified srcs, correspond to `M` or `S` or `N`
# SRC_D+=$(shell zsh -c 'echo $(SRC_D)/**/*(FN)')
# CSRC:=$(wildcard $(addsuffix /*.cpp,$(SRC_D)))
# CSRC+=$(wildcard $(addsuffix /*.cc,$(SRC_D)))
# VSRC:=$(wildcard $(addsuffix /*.sv,$(SRC_D)))
# VSRC+=$(wildcard $(addsuffix /*.v,$(SRC_D)))
SRC:=$(shell zsh -c 'echo $(SRC_D)/**/*.(cpp|cc|sv|v)(N)')
CSRC:=$(filter %.cpp,$(SRC))
CSRC+=$(filter %.cc,$(SRC))
VSRC:=$(filter %.sv,$(SRC))
VSRC+=$(filter %.v,$(SRC))

# all headers
INC:=$(wildcard $(addsuffix /*,$(INC_D)))

# all libs
LIB:=$(wildcard $(addsuffix /*.a,$(LIB_D)))
LIB+=$(wildcard $(addsuffix /*.so,$(LIB_D)))

# specified wave file
WAVE:=$(WAVE_D)/W$(PREFIX)$(MODULE).vcd

# VERILATOR_FLAGS+=$(addprefix --top-module ,$(TOPMODULE))
VERILATOR_FLAGS+=$(addprefix --Mdir ,$(MDIR))
VERILATOR_FLAGS+=$(addprefix --threads ,$(THREADS))

EXECUTABLE:=$(MDIR)/V$(MODULE)

# necessary, the `Vxxx.mk` generated by verilator is buggy,
# append this path to its `VPATH` through a `echo` command is much clumsy, but it works
# read the `Vxxx.mk` file and you can see the details
VVPATH:=../..

default: $(EXECUTABLE)

.PHONY: verilate
verilate:
	@echo
	@echo '### VERILATING ###############'
	@echo
	$(VERILATOR) $(VERILATOR_FLAGS) $(CSRC) $(VSRC) $(NVBFLAGS)
	@echo 'VPATH+=$(VVPATH)' >> $(MDIR)/V$(MODULE).mk

.PHONY: build
build:
	@echo
	@echo '### BUILDING   ###############'
	@echo
	$(MAKE) -j -C $(MDIR) -f V$(MODULE).mk V$(MODULE)

.PHONY: sim
sim: $(EXECUTABLE)
	@echo
	@echo '### SIMULATING ###############'
	@echo
	$(call git_commit, "sim RTL") # DO NOT REMOVE THIS LINE!!!
	./$< $(SIM_FLAGS)
	@[[ -e $(RAW_WAVE) ]] && mv $(RAW_WAVE) $(WAVE)

.PHONY: wave
wave: $(WAVE)
	@echo
	@echo '### WAVING     ###############'
	@echo
	gtkwave $<

$(EXECUTABLE): $(CSRC) $(VSRC) $(INC) $(LIB)
	@echo
	@echo '### VERILATING ###############'
	@echo
	$(VERILATOR) $(VERILATOR_FLAGS) $(CSRC) $(VSRC) $(NVBFLAGS)
	echo 'VPATH+=$(VVPATH)' >> $(MDIR)/V$(MODULE).mk
	@echo
	@echo '### BUILDING   ###############'
	@echo
	$(MAKE) -j -C $(MDIR) -f V$(MODULE).mk V$(MODULE)

$(WAVE): $(EXECUTABLE)
	@echo
	@echo '### SIMULATING ###############'
	@echo
	$(call git_commit, "sim RTL") # DO NOT REMOVE THIS LINE!!!
	./$< $(SIM_FLAGS)
	@[[ -e $(RAW_WAVE) ]] && mv $(RAW_WAVE) $(WAVE)

.PHONY: rewave
rewave: sim
	@echo
	@echo '### WAVING - FORCE    ########'
	@echo
	gtkwave $(WAVE)

.PHONY: lint
lint:
	@echo
	@echo '### LINTING    ###############'
	@echo
	$(VERILATOR) --lint-only $(VSRC)

.PHONY: clean
clean:
	@rm -rf $(MDIR) $(WAVE_D)

.PHONY: cleanall
cleanall:
	@rm -rf $(MDIR_BACKUP) $(WAVE_D)

.PHONY: verible
verible:
	@fd ".*\.(v|sv)$$" "./$(MASTER_D)" > verible.filelist

ifneq ($(MAKECMDGOALS),clean)
 $(shell mkdir -p $(WAVE_D))
 $(shell mkdir -p $(MDIR))
endif

include ../Makefile
